var documenterSearchIndex = {"docs":
[{"location":"oceanography/density/ocean/#Ocean-Density","page":"Ocean","title":"Ocean Density","text":"","category":"section"},{"location":"oceanography/density/ocean/","page":"Ocean","title":"Ocean","text":"ocean_density","category":"page"},{"location":"oceanography/density/ocean/#OceanSonar.ocean_density","page":"Ocean","title":"OceanSonar.ocean_density","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"oceanography/density/ocean/","page":"Ocean","title":"Ocean","text":"OceanDensity","category":"page"},{"location":"oceanography/density/ocean/#OceanSonar.OceanDensity","page":"Ocean","title":"OceanSonar.OceanDensity","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"oceanography/density/ocean/#Homogeneous-Ocean-Density","page":"Ocean","title":"Homogeneous Ocean Density","text":"","category":"section"},{"location":"oceanography/density/ocean/","page":"Ocean","title":"Ocean","text":"ocean_density(::Val{:homogeneous}, ::Real, ::Real)","category":"page"},{"location":"oceanography/density/ocean/#OceanSonar.ocean_density-Tuple{Val{:homogeneous}, Real, Real}","page":"Ocean","title":"OceanSonar.ocean_density","text":"ρ::Real = ocean_density(:homogeneous, x::Real, z::Real)\n\nSection 2.1.1.2 of Ainslie (2010).\n\n\n\n\n\n","category":"method"},{"location":"oceanography/attenuation/seabed/#Seabed-Attenuation","page":"Seabed","title":"Seabed Attenuation","text":"","category":"section"},{"location":"oceanography/attenuation/seabed/","page":"Seabed","title":"Seabed","text":"seabed_attenuation","category":"page"},{"location":"oceanography/attenuation/seabed/#OceanSonar.seabed_attenuation","page":"Seabed","title":"OceanSonar.seabed_attenuation","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"oceanography/attenuation/seabed/","page":"Seabed","title":"Seabed","text":"SeabedAttenuation","category":"page"},{"location":"oceanography/attenuation/seabed/#OceanSonar.SeabedAttenuation","page":"Seabed","title":"OceanSonar.SeabedAttenuation","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"oceanography/celerity/ocean/#Ocean-Celerity","page":"Ocean","title":"Ocean Celerity","text":"","category":"section"},{"location":"oceanography/celerity/ocean/","page":"Ocean","title":"Ocean","text":"TODO automate doc.","category":"page"},{"location":"oceanography/celerity/ocean/","page":"Ocean","title":"Ocean","text":"ocean_celerity","category":"page"},{"location":"oceanography/celerity/ocean/#OceanSonar.ocean_celerity","page":"Ocean","title":"OceanSonar.ocean_celerity","text":"c::Float64 = ocean_celerity(model, x::Real, z::Real; kwargs...)\n\nCalculation of sound speed in the ocean.\n\nmodel name of celerity model\nx horizontal range (m)\nz depth (m), positive downwards\nc celerity (m/s) of sound in the ocean for the specified model\nkwargs... keyword arguments, see specific model documentations.\n\nExample:\n\nc = ocean_celerity(:munk, 1e3, 1e2; ϵ = 1e-3)\n\n\n\n\n\n","category":"function"},{"location":"oceanography/celerity/ocean/","page":"Ocean","title":"Ocean","text":"OceanCelerity","category":"page"},{"location":"oceanography/celerity/ocean/#OceanSonar.OceanCelerity","page":"Ocean","title":"OceanSonar.OceanCelerity","text":"OceanCelerity(model::Val)\n\nConstruction of a data container for storing the desired model.\n\nBuilt-in models are: TODO\n\n\n\n\n\n","category":"type"},{"location":"oceanography/celerity/ocean/#Homogeneous-Ocean-Celerity","page":"Ocean","title":"Homogeneous Ocean Celerity","text":"","category":"section"},{"location":"oceanography/celerity/ocean/","page":"Ocean","title":"Ocean","text":"ocean_celerity(::Val{:homogeneous}, ::Real, ::Real)","category":"page"},{"location":"oceanography/celerity/ocean/#OceanSonar.ocean_celerity-Tuple{Val{:homogeneous}, Real, Real}","page":"Ocean","title":"OceanSonar.ocean_celerity","text":"c::Float64 = ocean_celerity(::Val{:homogeneous}, x::Real, z::Real)\n\nReturns a constant sound speed value c == 1500.0 for all ranges and depths.\n\n\n\n\n\n","category":"method"},{"location":"oceanography/celerity/ocean/#Index-Squared-Celerity-Profile","page":"Ocean","title":"Index-Squared Celerity Profile","text":"","category":"section"},{"location":"oceanography/celerity/ocean/","page":"Ocean","title":"Ocean","text":"ocean_celerity(::Val{:index_squared}, ::Real, ::Real)","category":"page"},{"location":"oceanography/celerity/ocean/#OceanSonar.ocean_celerity-Tuple{Val{:index_squared}, Real, Real}","page":"Ocean","title":"OceanSonar.ocean_celerity","text":"c::Float64 = ocean_celerity(:index_squared, x::Real, z::Real; c₀ = 1550.0)\n\nCalculation of ocean sound speed by Equation 3.77 of Jensen, et al (2011). This model is range independent and depth dependent.\n\nc₀ Sound speed at z = 0.\n\n\n\n\n\n","category":"method"},{"location":"oceanography/celerity/ocean/#Munk-Celerity-Profile","page":"Ocean","title":"Munk Celerity Profile","text":"","category":"section"},{"location":"oceanography/celerity/ocean/","page":"Ocean","title":"Ocean","text":"ocean_celerity(::Val{:munk}, ::Real, ::Real)","category":"page"},{"location":"oceanography/celerity/ocean/#OceanSonar.ocean_celerity-Tuple{Val{:munk}, Real, Real}","page":"Ocean","title":"OceanSonar.ocean_celerity","text":"c::Float64 = ocean_celerity(:munk, x::Real, z::Real; ϵ = 7.37e-3)\n\nCalculation of ocean sound speed by Equation 5.83 of Jensen, et al (2011). This model is range independent and depth dependent.\n\nϵ A factor (unitless) for variation with depth,\n\ne.g. ϵ = 0 gives a homogenous sound speed of 1500 m/s.\n\n\n\n\n\n","category":"method"},{"location":"oceanography/density/seabed/#Seabed-Density","page":"Seabed","title":"Seabed Density","text":"","category":"section"},{"location":"oceanography/density/seabed/","page":"Seabed","title":"Seabed","text":"seabed_density","category":"page"},{"location":"oceanography/density/seabed/#OceanSonar.seabed_density","page":"Seabed","title":"OceanSonar.seabed_density","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"oceanography/density/seabed/","page":"Seabed","title":"Seabed","text":"SeabedDensity","category":"page"},{"location":"oceanography/density/seabed/#OceanSonar.SeabedDensity","page":"Seabed","title":"OceanSonar.SeabedDensity","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"oceanography/medium/atmosphere/#Atmosphere-Medium","page":"Atmosphere","title":"Atmosphere Medium","text":"","category":"section"},{"location":"oceanography/medium/atmosphere/","page":"Atmosphere","title":"Atmosphere","text":"Atmosphere","category":"page"},{"location":"oceanography/medium/atmosphere/#OceanSonar.Atmosphere","page":"Atmosphere","title":"OceanSonar.Atmosphere","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"oceanography/boundary/intro/#Ocean-Boundaries","page":"Introduction","title":"Ocean Boundaries","text":"","category":"section"},{"location":"oceanography/density/intro/#Density","page":"Introduction","title":"Density","text":"","category":"section"},{"location":"acoustics/propagation/tracing/intro/#Acoustic-Tracing","page":"Introduction","title":"Acoustic Tracing","text":"","category":"section"},{"location":"acoustics/propagation/tracing/intro/","page":"Introduction","title":"Introduction","text":"TraceConfig","category":"page"},{"location":"acoustics/propagation/tracing/intro/#OceanSonar.TraceConfig","page":"Introduction","title":"OceanSonar.TraceConfig","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"oceanography/medium/seabed/#Ocean-Seabed-Medium","page":"Seabed","title":"Ocean Seabed Medium","text":"","category":"section"},{"location":"oceanography/medium/seabed/","page":"Seabed","title":"Seabed","text":"Seabed","category":"page"},{"location":"oceanography/medium/seabed/#OceanSonar.Seabed","page":"Seabed","title":"OceanSonar.Seabed","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/developers/#Developers","page":"Developers","title":"Developers","text":"","category":"section"},{"location":"generic/developers/","page":"Developers","title":"Developers","text":"Developers are advised to:","category":"page"},{"location":"generic/developers/","page":"Developers","title":"Developers","text":"Follow the Ocean Sonar Julia Implementation conceptual framework.\nPlace implementations in their appropriate conceptual hierarchy (TODO: elaborate).\nImplement tests in the ./test directory, also placed in the appropriate conceptual hierarchy.\nAdd docstrings to all names, even unexported names whose documentation is automatedly provided below in Private API.\nFollow the Style Guide below.","category":"page"},{"location":"generic/developers/#Style-Guide","page":"Developers","title":"Style Guide","text":"","category":"section"},{"location":"generic/developers/","page":"Developers","title":"Developers","text":"TODO: Decide on an external style guide, e.g. Blue or SciML.","category":"page"},{"location":"generic/developers/","page":"Developers","title":"Developers","text":"The following style guide applies:","category":"page"},{"location":"generic/developers/","page":"Developers","title":"Developers","text":"Instances of functors and data containers are abbreviated snake-case forms, e.g. cel for Celerity, or ocn_cel for OceanCelerity.\nParameter model functions are snake-case named, just like ocean_celerity. No abbreviation applied.\nFields of data containers are also abbreviated, which assists in legibility and brevity of nested container calls.\nAbbreviations are 3-4 characters long, but can be joined with underscores, e.g. ocn_cel for OceanCelerity.\nWhen the parent context of an instance is obvious, the underscore-joining abbreviation can be shortened, e.g. the field cel in an Ocean instance.\nDepending on context, variable names resembling mathematical symbols are either scalars, vectors, arrays, or functions, whichever satisfies both sense and brevity, especially for complicated equations.","category":"page"},{"location":"generic/developers/#Mathematical-Implementation-Conventions","page":"Developers","title":"Mathematical Implementation Conventions","text":"","category":"section"},{"location":"generic/developers/","page":"Developers","title":"Developers","text":"x is horizontal range.\nz is vertical depth, positive downwards.\nr is straight-line distance from one point to another.\ns is the arc-length of a curve.\nc is compressional sound speed, unless stated as shear. Referred to as \"celerity\" for brevity throughout code and documentation.\nTODO.","category":"page"},{"location":"generic/developers/#Private-API","page":"Developers","title":"Private API","text":"","category":"section"},{"location":"generic/developers/","page":"Developers","title":"Developers","text":"As assistance in getting started on development, the following documentation is provided for all unexported names.","category":"page"},{"location":"generic/developers/","page":"Developers","title":"Developers","text":"Modules = [OceanSonar]\nPublic = false","category":"page"},{"location":"generic/developers/#OceanSonar.Config","page":"Developers","title":"OceanSonar.Config","text":"OceanSonar.Config\n\nSupertype for OceanSonar.jl configuration structures.\n\n\n\n\n\n","category":"type"},{"location":"generic/developers/#OceanSonar.Container","page":"Developers","title":"OceanSonar.Container","text":"OceanSonar.Container\n\nSupertype for OceanSonar.jl containers for data.\n\n\n\n\n\n","category":"type"},{"location":"generic/developers/#OceanSonar.Functor","page":"Developers","title":"OceanSonar.Functor","text":"OceanSonar.Functor\n\nSupertype for OceanSonar.jl functors.\n\n\n\n\n\n","category":"type"},{"location":"generic/developers/#OceanSonar.OcnSon","page":"Developers","title":"OceanSonar.OcnSon","text":"OceanSonar.OcnSon\n\nSupertype for OceanSonar.jl containers and functors.\n\n\n\n\n\n","category":"type"},{"location":"generic/developers/#OceanSonar.Result","page":"Developers","title":"OceanSonar.Result","text":"OceanSonar.Result\n\nSupertype for OceanSonar.jl containers for results and data.\n\n\n\n\n\n","category":"type"},{"location":"acoustics/propagation/tracing/replication/#Replicating-Literature-Tracing-Results","page":"Replication","title":"Replicating Literature Tracing Results","text":"","category":"section"},{"location":"acoustics/propagation/tracing/replication/","page":"Replication","title":"Replication","text":"using OceanSonar\nusing Plots\n\nscen = Scenario(\"Munk Profile\")\n\nc0 = scen.env.ocn.cel(0, scen.z)\nz_srf = scen.env.ati(0)\nz_bot = scen.env.bty(0)\nc_srf = scen.env.ocn.cel(0, z_srf)\nc_bot = scen.env.ocn.cel(0, z_bot - 250)\nmin_angle = -critical_angle(c0, c_srf)\nmax_angle = critical_angle(c0, c_bot)\nangles = range(min_angle, max_angle, 31)\n\nbeams = Beams(\"Gaussian\", scen, angles = angles)\n\nfig = visual(beams)\nplot!(ylim = (z_srf, z_bot))\n\nsavefig(fig, \"jensen_etal_fig_3_32.svg\")","category":"page"},{"location":"acoustics/propagation/tracing/replication/","page":"Replication","title":"Replication","text":"Figure 3.32 of Jensen, et al (2011).","category":"page"},{"location":"acoustics/propagation/tracing/replication/","page":"Replication","title":"Replication","text":"(Image: jensen_etal_fig_3_32.svg)","category":"page"},{"location":"oceanography/attenuation/intro/#Attenuation","page":"Introduction","title":"Attenuation","text":"","category":"section"},{"location":"acoustics/propagation/intro/#Acoustic-Propagation","page":"Introduction","title":"Acoustic Propagation","text":"","category":"section"},{"location":"acoustics/propagation/intro/","page":"Introduction","title":"Introduction","text":"PropagationConfig","category":"page"},{"location":"acoustics/propagation/intro/#OceanSonar.PropagationConfig","page":"Introduction","title":"OceanSonar.PropagationConfig","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"acoustics/propagation/intro/","page":"Introduction","title":"Introduction","text":"Propagation","category":"page"},{"location":"acoustics/propagation/intro/#OceanSonar.Propagation","page":"Introduction","title":"OceanSonar.Propagation","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"acoustics/scenario/#Ocean-Sonar-Scenarios","page":"Scenario","title":"Ocean Sonar Scenarios","text":"","category":"section"},{"location":"acoustics/scenario/","page":"Scenario","title":"Scenario","text":"Scenario","category":"page"},{"location":"acoustics/scenario/#OceanSonar.Scenario","page":"Scenario","title":"OceanSonar.Scenario","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"oceanography/boundary/altimetry/#Altimetry","page":"Altimetry","title":"Altimetry","text":"","category":"section"},{"location":"oceanography/boundary/altimetry/","page":"Altimetry","title":"Altimetry","text":"altimetry","category":"page"},{"location":"oceanography/boundary/altimetry/#OceanSonar.altimetry","page":"Altimetry","title":"OceanSonar.altimetry","text":"z::Float64 = altimetry(model::Val, x::Real)\n\nx (m) horizontal range\nmodel name of model\nz (m) ocean surface height\n\nBuilt-in models are:\n\nExamples:\n\naltimetry(:sine, 1e3)\naltimetry(:sine, 1e2)\n\n\n\n\n\n","category":"function"},{"location":"oceanography/boundary/altimetry/","page":"Altimetry","title":"Altimetry","text":"Altimetry","category":"page"},{"location":"oceanography/boundary/altimetry/#OceanSonar.Altimetry","page":"Altimetry","title":"OceanSonar.Altimetry","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"acoustics/intro/#Ocean-Acoustics","page":"Introduction","title":"Ocean Acoustics","text":"","category":"section"},{"location":"generic/implementation/#Ocean-Sonar-Julia-Implementation","page":"Implementation","title":"Ocean Sonar Julia Implementation","text":"","category":"section"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"The following description of the OceanSonar.jl package is intended more as a conceptual guide rather than a precise description of the implementation.","category":"page"},{"location":"generic/implementation/#Types","page":"Implementation","title":"Types","text":"","category":"section"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"The OceanSonar.jl package defines four different types of objects, each serving different purposes.","category":"page"},{"location":"generic/implementation/#Parameter-Model-Functions","page":"Implementation","title":"Parameter Model Functions","text":"","category":"section"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"The purpose of model functions is to implement the calculation of a parameter while providing ease-of-usage for dispatching on different methods to calculate said parameter.","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"For example, the calculation of sound speed in the ocean has syntax:","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"ocean_celerity(model, x, z; kwargs...)","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"Examples of its usage are","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"using OceanSonar\n\nocean_celerity(:munk, 0, 100) # for the Munk profile model\nocean_celerity(:index_squared, 0, 100) # for a sound speed which varies proportional to the squared refractive index","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"The list of models available can be obtained via list_models as such:","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"using OceanSonar\n\nlist_models(ocean_celerity)","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"Other examples of parameter model functions are:","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"atmosphere_celerity and seabed_celerity.\natmosphere_density, ocean_density, and seabed_density (not yet implemented).\naltimetry and bathymetry.","category":"page"},{"location":"generic/implementation/#Parameter-Model-Functors","page":"Implementation","title":"Parameter Model Functors","text":"","category":"section"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"Parameter model functors store information about one model for one parameter. As you will see below, this enables collecting multiple functors under conceptual umbrellas.","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"using OceanSonar\n\ncel = OceanCelerity(:munk)\ncel(1e3, 1e2)","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"Again, to list_models for OceanCelerity or any functor type,","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"using OceanSonar\n\nlist_models(OceanCelerity)","category":"page"},{"location":"generic/implementation/#Composite-Data-Containers","page":"Implementation","title":"Composite Data Containers","text":"","category":"section"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"The purpose of composite data containers is to store a collection of functors under a conceptual umbrella. For the example of describing the Ocean as an acoustic medium, (density field not yet implemented):","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"using OceanSonar\n\nocn = Ocean(\n    cel = OceanCelerity(:munk),\n    den = OceanDensity(:standard)\n)","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"where ocn stores information as properties of the ocean celerity and the density profiles. Its usage is then, for example,","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"ocn.cel(1e3, 1e2)","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"Models are also implemented for composite data containers, but for this case they are moreso examples than actual calculation models. For example,","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"using OceanSonar\n\nocn = Ocean(:munk_profile)","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"and then, if desired, its properties can be mutated:","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"ocn.cel = OceanCelerity(:index_squared_profile)","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"And of course, list_models(Ocean) provides a list of available Ocean models.","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"Other examples of composite data containers are:","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"Atmosphere and Seabed are analogous medium data containers.\nEnvironment, which stores information about the Atmosphere, Ocean, and Seabed.\nScenario stores an Environment instance along with other numerical values.","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"All of which are compatible with list_models.","category":"page"},{"location":"generic/implementation/#Composite-Parameter-Model-Containers","page":"Implementation","title":"Composite Parameter Model Containers","text":"","category":"section"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"Acting as a combination of the other three types, composite parameter model containers both compute a model and store multiple information. A central feature of the OceanSonar.jl package is its propagation modelling, with syntax:","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"prop = Propagation(model, scen, ranges, depths)","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"where model is one of list_models(Propagation), scen is a Scenario instance, and ranges and depths are.","category":"page"},{"location":"generic/implementation/#Visualisation","page":"Implementation","title":"Visualisation","text":"","category":"section"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"If you load Plots.jl (not implemented yet) or a Makie.jl backend, OceanSonar.jl will load plot recipes that enable easy visualisation of instances you've computed. For example (not yet functional):","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"scen = Scenario(:munk_profile)\nprop = Propagation(scen)\nheatmap(prop) # subject to change","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"The plotting methods provided by your chosen visualisation package will apply to OceanSonar.jl instances as appropriate.","category":"page"},{"location":"generic/implementation/#Ray-Trace-Plot","page":"Implementation","title":"Ray Trace Plot","text":"","category":"section"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"TODO.","category":"page"},{"location":"generic/implementation/#Propagation-Loss-Heatmap","page":"Implementation","title":"Propagation Loss Heatmap","text":"","category":"section"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"TODO.","category":"page"},{"location":"generic/implementation/#Sonar-Performance-Visualisation","page":"Implementation","title":"Sonar Performance Visualisation","text":"","category":"section"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"TODO.","category":"page"},{"location":"generic/implementation/#Expansion","page":"Implementation","title":"Expansion","text":"","category":"section"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"You most certainly have some parameters and models in mind that aren't provided by OceanSonar.jl. The design of this package involves enabling easy expansion of its modelling capabilities.","category":"page"},{"location":"generic/implementation/#Custom-Model","page":"Implementation","title":"Custom Model","text":"","category":"section"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"Maybe the parameter you wish to calculate is implemented, but you have a model that isn't implemented. In this case, adding your model is easy. Simply import the parameter of your choice, then add a method as in the following example:","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"import OceanSonar: ocean_celerity\n\nfunction ocean_celerity(::Val{:model_name}, x, z)\n    return 1500.0 + sin(x) + cos(z)\nend","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"and it will be callable as","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"ocean_celerity(:model_name, 1e3, 1e2)","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"Note that in the method definition above, the signature involved:","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"The model specification as the first argument.\nThe model name is implemented as a snake-case Symbol parameter to Val.","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"Implementation using Val leverages Julia's fast computation via multiple dispatch.","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"note: Invalid bounds handling\nConsider using the NaNMath.jl package as an alternative to some mathematical functions. Normally, Julia's mathematical functions throw an exception when, e.g. out-of-bounds values are hit. Some computational methods rely gathering multiple values that may be out of the appropriate domain of the function. As such, use e.g. NaNMath.sqrt in case its argument is negative, or NaNMath.sin in case its argument is infinite.","category":"page"},{"location":"generic/implementation/#Custom-Model-Interpolation","page":"Implementation","title":"Custom Model Interpolation","text":"","category":"section"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"In some cases, the model you want to implement is not so much a model, but some data to interpolate. OceanSonar.jl provides methods to both interpolate your data and define your model function. For example (not yet implemented):","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"using OceanSonar\nimport ocean_celerity\n\nitp = Bivariate()\nocean_celerity(::Val{:model_name}, x, z) = itp(x, z)","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"Usage is highly flexible, and thus its extensive details are explored in Interpolation.","category":"page"},{"location":"generic/implementation/#Custom-Parameter","page":"Implementation","title":"Custom Parameter","text":"","category":"section"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"Maybe for your intended use case, OceanSonar.jl is missing the calculation of a parameter, e.g. the developer hasn't implemented calculations for ocean salinity yet.","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"In this case, your definition will be:","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"# TODO","category":"page"},{"location":"generic/implementation/","page":"Implementation","title":"Implementation","text":"and then defining models for it as above in Custom Model.","category":"page"},{"location":"oceanography/celerity/shear/#Shear-Seabed-Celerity","page":"Seabed Shear","title":"Shear Seabed Celerity","text":"","category":"section"},{"location":"oceanography/celerity/shear/","page":"Seabed Shear","title":"Seabed Shear","text":"shear_seabed_celerity","category":"page"},{"location":"oceanography/celerity/shear/#OceanSonar.shear_seabed_celerity","page":"Seabed Shear","title":"OceanSonar.shear_seabed_celerity","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"oceanography/celerity/shear/","page":"Seabed Shear","title":"Seabed Shear","text":"ShearSeabedCelerity","category":"page"},{"location":"oceanography/celerity/shear/#OceanSonar.ShearSeabedCelerity","page":"Seabed Shear","title":"OceanSonar.ShearSeabedCelerity","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"detection/threshold/#Detection-Threshold","page":"Threshold","title":"Detection Threshold","text":"","category":"section"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"The detection threshold DT as a function of detection index d is given by","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"DT = -5log_10(d)","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"where","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"d = 2calEN_0","category":"page"},{"location":"detection/threshold/#Abraham-Info-Box-pg-84-5","page":"Threshold","title":"Abraham Info Box pg 84-5","text":"","category":"section"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"Deterministic signal with CMF: Equation 2.95\nNoise: calN(0 1)\nSPN: calN(sqrt2 S^rmd 1)\nDeterministic signal with integrated QMF or ED:\nExact for M geq 1: Sec 7.5.1 or 8.8.2","category":"page"},{"location":"detection/threshold/#Kaw:-Derivation","page":"Threshold","title":"Kaw: Derivation","text":"","category":"section"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"h(P_f)\nh(SNR)\nh(P_d)","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"Theoretical:","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"N sim , S sim \nT (optimal)\nX_0 sim T(N), X_1 sim T(S + N)\nP_f = 1 - F_0(h), P_d = 1 - F_1(h)\nh = h Rightarrow F_0^-1(1 - P_f) = F_1^-1(1 - P_d)\nrmEX_0 rmEX_1 VarX_0 = VarX_1 w.r.t. distribution parameters\nDistribution parameters w.r.t. (P_f P_d)\nrmEX_0 rmEX_1 VarX_0 = VarX_1 wrt (P_f P_d)\nd(rmEX_0 rmEX_1 VarX_0) = d(P_f P_d) by substitution of H_1 mean","category":"page"},{"location":"detection/threshold/#Abraham-Eqn-2.95","page":"Threshold","title":"Abraham Eqn 2.95","text":"","category":"section"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"Conditions:","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"Signal known exactly Rightarrow CMF optimal.\nNoise: Gaussian.\nDetector: ?","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"phi_f = Phi^-1(1 - P_f) \nphi_d = Phi^-1(1 - P_d) \nd = (phi_f - phi_d)^2","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"If T is time over which MSP is formed, then calE = T P_0^a and","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"d = frac2calEN_0 \n= 2left( fraccalE  TN_0 W right) \n= 2 S^a W T \n= 2 S^d","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"DT = overlineSNR^d = 10 log_10left fracleft( phi_f - phi_d right)^22 right","category":"page"},{"location":"detection/threshold/#Kaw:-Deterministic-Signal-with-CMF","page":"Threshold","title":"Kaw: Deterministic Signal with CMF","text":"","category":"section"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"Expectation and variance coincide with parameters.","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"Goal is easier to reach with abstraction of distribution statistics, also easier to see relationships:","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"mu_N = 0\nmu_S = \nsigma_0 = 1\n(mu_0 = mu_N)\n(rmET(S + N) = mu_1 = sqrt2 S^rmd)","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"Assumptions:","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"beginalign*\n    N sim calN(mu_N sigma_0) \n    S = mu_S\nendalign*","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"Optimal processor:","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"T(x) = ","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"Hypotheses:","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"beginalign*\n    S + N sim calN(mu_N + mu_S sigma_0) \n    X_0 sim T(N) sim calN(mu_0 sigma_0) \n    X_1 sim T(S + N) sim calN(mu_1 sigma_0)\nendalign*","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"Probabilities:","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"beginalign*\n    P_f = 1 - F_0(h) = 1 - Phileft( frach - mu_0sigma_0 right) \n    P_d = 1 - F_1(h) = 1 - Phileft( frach - mu_1sigma_0 right)\nendalign*","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"Relating probabilities:","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"beginalign*\n    h = sigma_0 Phi^-1(1 - P_f) + mu_0 \n    h = sigma_0 Phi^-1(1 - P_d) + mu_1 \n    Rightarrow sigma_0 Phi^-1(1 - P_f) + mu_0 = sigma_0 Phi^-1(1 - P_d) + mu_1\nendalign*","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"Detection index components:","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"beginalign*\n    rmEX_1(P_f P_d)\n    = mu_1 = mu_0 + sigma_0 left Phi^-1(1 - P_f) - Phi^-1(1 - P_d) right\nendalign*","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"Detection index:","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"beginalign*\n    sqrtd = fracrmEX_1(P_f P_d) - rmEX_0(P_f P_d)STDX_0(P_f P_d) \n    = fracmu_1 - mu_0sigma_0 \n    = frac\n        mu_0 + sigma_0 left Phi^-1(1 - P_f) - Phi^-1(1 - P_d) right - mu_0\n    sigma_0 \n    = Phi^-1(1 - P_f) - Phi^-1(1 - P_d)\nendalign*","category":"page"},{"location":"detection/threshold/#Kaw:-Exponential","page":"Threshold","title":"Kaw: Exponential","text":"","category":"section"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"beginalign*\n    P_f = 1 - F_0(h) \n    = e^-hlambda_0 \n    P_d = e^-hlambda_1\nendalign*","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"beginalign*\n    h = lambda_0 ln(P_f) \n    h = lambda_1 ln(P_d) \n    Rightarrow lambda_0 ln(P_f) = lambda_1 ln(P_d)\nendalign*","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"beginalign*\n    rmE X_1  = lambda_0 fracln(P_f)ln(P_d) \n    sqrtd = frac\n        lambda_0 dfracln(P_f)ln(P_d) - lambda_0\n    \n        lambda_0\n     \n    = dfracln(P_f)ln(P_d) - 1\nendalign*","category":"page"},{"location":"detection/threshold/#Kaw:-Rayleigh","page":"Threshold","title":"Kaw: Rayleigh","text":"","category":"section"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"beginalign*\n    P_f = e^-h^2(2sigma_0^2) \n    P_d = e^-h^2(2sigma_1^2) \n    sqrt-2sigma_0^2ln(P_f) = sqrt-2sigma_1^2ln(P_d) \n    sigma_1 = sqrtsigma_0^2 fracln(P_f)ln(P_d) \n    rmEX_1 = sigma_1sqrtfracpi2 \n    = sqrtsigma_0^2 fracpi2 fracln(P_f)ln(P_d) \n    sqrtd = fracrmEX_1 - rmEX_0STDX_0 \n    = frac\n        sigma_1sqrtpi2 - sigma_0sqrtpi2\n    \n        sigma_0 sqrt2 - pi2\n     \n    = frac\n        sqrtsigma_0^2 dfracpi2 dfracln(P_f)ln(P_d) - sigma_0sqrtpi2\n    \n        sigma_0 sqrt2 - pi2\n     \n    = frac\n        sqrtdfracpi2 dfracln(P_f)ln(P_d) - sqrtdfracpi2\n    \n        sqrt2 - dfracpi2\n     \n    = sqrtfracpi4 - pi left( fracln(P_f)ln(P_d) - 1 right)\nendalign*","category":"page"},{"location":"detection/threshold/#Kaw:-Rice","page":"Threshold","title":"Kaw: Rice","text":"","category":"section"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"Generalised Rayleigh.","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"beginalign*\n    X_0 sim Rice(sigma_0 alpha_0) \n    X_1 sim Rice(sigma_1 alpha_1) \n    P_f = Q_1left( fracalpha_0sigma_0 frachsigma_0 right) \n    P_f = Q_1left( fracalpha_1sigma_1 frachsigma_1 right) \n    h = sigma_0 Q_1^-1left( fracalpha_0sigma_0 P_f right) \n    h = sigma_1 Q_1^-1left( fracalpha_1sigma_1 P_d right) \n    sigma_0 Q_1^-1left( fracalpha_0sigma_0 P_f right)\n    = sigma_1 Q_1^-1left( fracalpha_1sigma_1 P_d right)\nendalign*","category":"page"},{"location":"detection/threshold/#Kaw:-Computation","page":"Threshold","title":"Kaw: Computation","text":"","category":"section"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"Theory:","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"N sim , S sim \nT (optimal)\nX_0 sim T(N), X_1 sim T(S + N)\nP_f = 1 - F_0(h), P_d = 1 - F_1(h)\nh = h Rightarrow F_0^-1(1 - P_f) = F_1^-1(1 - P_d)\nrmEX_0 rmEX_1 VarX_0 = VarX_1 w.r.t. distribution parameters\nDistribution parameters w.r.t. (P_f P_d)\nrmEX_0 rmEX_1 VarX_0 = VarX_1 wrt (P_f P_d)\nd(rmEX_0 rmEX_1 VarX_0) = d(P_f P_d) by substitution of H_1 mean","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"Generalisation Implementation:","category":"page"},{"location":"detection/threshold/","page":"Threshold","title":"Threshold","text":"Define noise and signal distributions.\nDefine detector.\nDerive cumulative distribution functions of hypotheses.\nDerive inverse CDFs.\nExpress probabilities w.r.t. detector threshold.\nTODO.","category":"page"},{"location":"oceanography/medium/ocean/#Ocean-Medium","page":"Ocean","title":"Ocean Medium","text":"","category":"section"},{"location":"oceanography/medium/ocean/","page":"Ocean","title":"Ocean","text":"Ocean","category":"page"},{"location":"oceanography/medium/ocean/#OceanSonar.Ocean","page":"Ocean","title":"OceanSonar.Ocean","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/usage/#Usage-of-OceanSonar.jl","page":"Usage","title":"Usage of OceanSonar.jl","text":"","category":"section"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"For those who already know the field of ocean sonar, this page is probably all you'll need to know (on top of knowing how Julia works) in order to use this package. The remainder of this documentation is an introduction to ocean sonar alongside the syntax of this package's provided tools.","category":"page"},{"location":"generic/usage/#Installation","page":"Usage","title":"Installation","text":"","category":"section"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"Installation in the Julia REPL:","category":"page"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"using Pkg\nPkg.add(\"OceanSonar\")","category":"page"},{"location":"generic/usage/#Loading","page":"Usage","title":"Loading","text":"","category":"section"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"Simply:","category":"page"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"using OceanSonar","category":"page"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"If you wish to add your own model to a parameter, e.g. to ocean_celerity:","category":"page"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"import OceanSonar: ocean_celerity","category":"page"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"See Expansion for more details.","category":"page"},{"location":"generic/usage/#What-does-this-package-provide?","page":"Usage","title":"What does this package provide?","text":"","category":"section"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"This package provides the means to:","category":"page"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"Calculate parameters\nDefine data and store in containers\nCalculate performance metrics\nVisualise containers and metrics\nAdd your own calcuation methods","category":"page"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"After Loading this package, the names in the following sections are available for use. As usual, view the help documentation for each for specific syntax.","category":"page"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"Calculate parameters (with model selection):","category":"page"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"altimetry\nbathymetry\natmosphere_celerity\nocean_celerity\nseabed_celerity","category":"page"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"Populate data structures (also with model selection):","category":"page"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"Altimetry\nBathymetry\nAtmosphereCelerity\nOceanCelerity\nSeabedCelerity\nEnvironment\nScenario","category":"page"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"Calculate performance metrics (also with model selection):","category":"page"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"Propagation","category":"page"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"Visualise data structures and performance metrics - requires either Plots.jl or a Makie.jl backend.","category":"page"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"boundaryplot\ncelerityplot\nrayplot\npropagationplot","category":"page"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"Add your own model, as per the example below.","category":"page"},{"location":"generic/usage/#Example:-Add-Ocean-Celerity-Model","page":"Usage","title":"Example: Add Ocean Celerity Model","text":"","category":"section"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"import OceanSonar: ocean_celerity\nfunction ocean_celerity(::Val{:my_model}, x::Real, z::Real)\n    1500.0 + cos(x)*sin(z)\nend","category":"page"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"which will then be available as","category":"page"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"ocean_celerity(:my_model, 1e3, 1e2)","category":"page"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"and also available as a model for OceanCelerity, i.e.","category":"page"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"using OceanSonar\nusing CairoMakie\ncel = OceanCelerity(:my_model)\ncelerityplot(cel)","category":"page"},{"location":"generic/usage/#Example:-Plot-a-Ray-Trace","page":"Usage","title":"Example: Plot a Ray Trace","text":"","category":"section"},{"location":"generic/usage/","page":"Usage","title":"Usage","text":"using OceanSonar\nusing Plots\nscen = Scenario(:munk_profile)\nprop = Propagation(:trace, scen, angles = :critical)\npropagationplot(prop)","category":"page"},{"location":"oceanography/celerity/atmosphere/#Atmosphere-Celerity","page":"Atmosphere","title":"Atmosphere Celerity","text":"","category":"section"},{"location":"oceanography/celerity/atmosphere/","page":"Atmosphere","title":"Atmosphere","text":"atmosphere_celerity","category":"page"},{"location":"oceanography/celerity/atmosphere/#OceanSonar.atmosphere_celerity","page":"Atmosphere","title":"OceanSonar.atmosphere_celerity","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"oceanography/celerity/atmosphere/","page":"Atmosphere","title":"Atmosphere","text":"AtmosphereCelerity","category":"page"},{"location":"oceanography/celerity/atmosphere/#OceanSonar.AtmosphereCelerity","page":"Atmosphere","title":"OceanSonar.AtmosphereCelerity","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"#OceanSonar.jl","page":"Ocean Sonar","title":"OceanSonar.jl","text":"","category":"section"},{"location":"","page":"Ocean Sonar","title":"Ocean Sonar","text":"Documentation for OceanSonar.jl","category":"page"},{"location":"acoustics/propagation/parabolic/marchers/#Marchers","page":"Marchers","title":"Marchers","text":"","category":"section"},{"location":"acoustics/propagation/parabolic/marchers/","page":"Marchers","title":"Marchers","text":"To be renamed.","category":"page"},{"location":"acoustics/propagation/parabolic/marchers/","page":"Marchers","title":"Marchers","text":"using OceanSonar\nusing Plots\n\nθ_deg = range(0, 90, 301)\nθ = deg2rad.(θ_deg)\nq = -sin.(θ).^2\n\nhelmholtz(q) = √(1 + q)\nhelmholtz_q = helmholtz.(q)\n\nplot()\n\nfor model = list_models(OceanSonar.RationalFunctionApproximation)\n    rfa = OceanSonar.RationalFunctionApproximation(model)\n    errs = helmholtz_q - rfa.(q) .|> abs\n    plot!(θ_deg, errs,\n        label = string(model, \" (\", length(rfa.a), \")\")\n    )\nend\nmodel = :pade\nrfa = OceanSonar.RationalFunctionApproximation(model, m = 5)\nerrs = helmholtz_q - rfa.(q) .|> abs\nplot!(θ_deg, errs,\n    label = string(model, \" (\", length(rfa.a), \")\")\n)\n\nplot!(\n    xlims = (0, 90),\n    ylims = (0, 0.001),\n    legend_position = :best\n)\n\nsavefig(\"phase_errors.svg\")","category":"page"},{"location":"acoustics/propagation/parabolic/marchers/","page":"Marchers","title":"Marchers","text":"Replication of Figure 6.1b of Jensen, et al (2011).","category":"page"},{"location":"acoustics/propagation/parabolic/marchers/","page":"Marchers","title":"Marchers","text":"(Image: phase_errors.svg)","category":"page"},{"location":"acoustics/propagation/tracing/beam/#Beam-Tracing","page":"Beams","title":"Beam Tracing","text":"","category":"section"},{"location":"acoustics/propagation/tracing/beam/","page":"Beams","title":"Beams","text":"Beam","category":"page"},{"location":"acoustics/propagation/tracing/beam/#OceanSonar.Beam","page":"Beams","title":"OceanSonar.Beam","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/modelling/#Ocean-Sonar-Modelling","page":"Modelling","title":"Ocean Sonar Modelling","text":"","category":"section"},{"location":"generic/modelling/","page":"Modelling","title":"Modelling","text":"list_models","category":"page"},{"location":"generic/modelling/#OceanSonar.list_models","page":"Modelling","title":"OceanSonar.list_models","text":"models::Symbol = list_models(\n    func::Union{\n        Function,\n        Type{<:Container},\n        Type{<:Result}\n    }\n)\n\n\n\n\n\n","category":"function"},{"location":"generic/modelling/","page":"Modelling","title":"Modelling","text":"modelval\nmodelsnake\nmodeltitle\nmodelsymbol","category":"page"},{"location":"generic/modelling/#OceanSonar.modelval","page":"Modelling","title":"OceanSonar.modelval","text":"modelval(model::Union{String, Symbol, Val})\n\nConverts model as a String, Symbol, or Val into a Val for OceanSonar model parsing.\n\n\n\n\n\n","category":"function"},{"location":"generic/modelling/#OceanSonar.modelsnake","page":"Modelling","title":"OceanSonar.modelsnake","text":"modelsnake(model::Union{String, Symbol, Val})\n\nConverts model as a String, Symbol, or Val into a snake-case String for OceanSonar model parsing.\n\n\n\n\n\n","category":"function"},{"location":"generic/modelling/#OceanSonar.modeltitle","page":"Modelling","title":"OceanSonar.modeltitle","text":"modeltitle(model::Union{String, Symbol, Val})\n\nConverts model as a String, Symbol, or Val into a title-case String for OceanSonar model parsing.\n\n\n\n\n\n","category":"function"},{"location":"generic/modelling/#OceanSonar.modelsymbol","page":"Modelling","title":"OceanSonar.modelsymbol","text":"modelsymbol(model::Union{String, Symbol, Val})\n\nConverts model as a String, Symbol, or Val into a Symbol for OceanSonar model parsing.\n\n\n\n\n\n","category":"function"},{"location":"acoustics/reflection/intro/#Acoustic-Reflection","page":"Introduction","title":"Acoustic Reflection","text":"","category":"section"},{"location":"generic/interpolation/#Interpolation","page":"Interpolation","title":"Interpolation","text":"","category":"section"},{"location":"generic/interpolation/","page":"Interpolation","title":"Interpolation","text":"Interpolation in OceanSonar.jl is designed to fit many use cases, from a simple linear interpolation to a collection of vertical profiles over a set of ranges.","category":"page"},{"location":"generic/interpolation/","page":"Interpolation","title":"Interpolation","text":"Two functions have been defined for interpolation: Univariate and Bivariate.","category":"page"},{"location":"generic/interpolation/#Univariate","page":"Interpolation","title":"Univariate","text":"","category":"section"},{"location":"generic/interpolation/","page":"Interpolation","title":"Interpolation","text":"Univariate","category":"page"},{"location":"generic/interpolation/#OceanSonar.Univariate","page":"Interpolation","title":"OceanSonar.Univariate","text":"Univariate is both an abstract type and a function that produces an interpolation-extrapolation object.\n\nitp::Univariate = Univariate(args...; kwargs...)\n\nReturns univariate interpolator-extrapolator object whose behaviour is specified by TODO.\n\nTODO: Implement.\n\nFor example,\n\nitp = Univariate(1:10, rand(10))\nitp(2.4)\n\n\n\n\n\n","category":"type"},{"location":"generic/interpolation/#Bivariate","page":"Interpolation","title":"Bivariate","text":"","category":"section"},{"location":"generic/interpolation/","page":"Interpolation","title":"Interpolation","text":"Bivariate","category":"page"},{"location":"generic/interpolation/#OceanSonar.Bivariate","page":"Interpolation","title":"OceanSonar.Bivariate","text":"Bivariate <: Functor\n\nBivariate is both an abstract type and a function that produces an interpolation-extrapolation object.\n\nitp::Bivariate = Univariate(args...; kwargs...)\n\nReturns a bivariate interpolator-extrapolator object whose behaviour is specified by TODO.\n\nTODO: Implement.\n\nFor example,\n\nitp = Bivariate(1:10, 1:20, rand(10, 20))\nitp(2.4, 11.5)\n\n\n\n\n\n","category":"type"},{"location":"generic/interpolation/#Trivariate","page":"Interpolation","title":"Trivariate","text":"","category":"section"},{"location":"generic/interpolation/","page":"Interpolation","title":"Interpolation","text":"Trivariate","category":"page"},{"location":"generic/interpolation/#OceanSonar.Trivariate","page":"Interpolation","title":"OceanSonar.Trivariate","text":"Trivariate is both an abstract type and a function that produces an interpolation-extrapolation object.\n\n\n\n\n\n","category":"type"},{"location":"detection/intro/#Statistical-Detection-Theory","page":"Introduction","title":"Statistical Detection Theory","text":"","category":"section"},{"location":"acoustics/reflection/bottom/#Bottom-Reflection","page":"Bottom","title":"Bottom Reflection","text":"","category":"section"},{"location":"acoustics/reflection/bottom/","page":"Bottom","title":"Bottom","text":"using OceanSonar\nusing CairoMakie\n\n@kwdef struct Case\n    family::Symbol\n    axis::Axis\n    θ₁ = range(0, π/2, 301)\n    ρ₁ = [1e3]\n    c₁ = [1500.0]\n    α₁ = [0.0]\n    c₂ₚ = [1600.0]\n    c₂ₛ = [0.0]\n    α₂ₚ = [0.5]\n    α₂ₛ = [0.0]\n    ρ₂ = [2e3]\nend\n\nfig = Figure()\n\ncases = [\n    Case(\n        family = :c₂ₚ,\n        axis = Axis(fig[1, 1], title = \"Celerity\"),\n        c₂ₚ = Float64[1550 1600 1800],\n    )\n    Case(\n        family = :α₂ₚ,\n        axis = Axis(fig[1, 2], title = \"Attenuation\"),\n        α₂ₚ = Float64[0 0.5 1],\n    )\n    Case(\n        family = :ρ₂,\n        axis = Axis(fig[2, 1], title = \"Density\"),\n        ρ₂ = Float64[1500 2000 2500],\n    )\n    Case(\n        family = :c₂ₛ,\n        axis = Axis(fig[2, 2], title = \"Shear Celerity\"),\n        c₂ₛ = Float64[0 200 400 600],\n        α₂ₚ = [0.0]\n    )\n]\n\ntranslate_inputs = (\n    ρ_inc = :ρ₁,\n    ρ_rfr = :ρ₂,\n    c_inc = :c₁,\n    c_compr_rfr = :c₂ₚ,\n    c_shear_rfr = :c₂ₛ,\n    α_inc = :α₁,\n    α_compr_rfr = :α₂ₚ,\n    α_shear_rfr = :α₂ₛ,\n    θ_inc = :θ₁\n)\n\nmodel = :rayleigh_solid\n\nfor case in cases\n    inputs = Tuple(\n        getproperty(case, translate_inputs[input])\n        for input in list_inputs(reflection_coefficient, model)\n    )\n    R = @. reflection_coefficient(model, inputs...)\n    BRLs = @. -20log10(R |> abs)\n\n    for (n, BRL) in BRLs |> eachcol |> enumerate\n        lines!(case.axis, case.θ₁ .|> rad2deg, BRL,\n            label = getproperty(case, case.family)[n] |> string\n        )\n    end\n\n    ylims!(case.axis, 0, 15)\n    xlims!(case.axis, 0, 90)\n    axislegend(case.axis)\nend\n\nsave(\"jensen_fig_1_23.svg\", fig)","category":"page"},{"location":"oceanography/medium/intro/#Acoustic-Medium","page":"Introduction","title":"Acoustic Medium","text":"","category":"section"},{"location":"oceanography/medium/intro/","page":"Introduction","title":"Introduction","text":"Medium","category":"page"},{"location":"oceanography/medium/intro/#OceanSonar.Medium","page":"Introduction","title":"OceanSonar.Medium","text":"Generic medium container.\n\n\n\n\n\n","category":"type"},{"location":"oceanography/attenuation/atmosphere/#Atmosphere-Attenuation","page":"Atmosphere","title":"Atmosphere Attenuation","text":"","category":"section"},{"location":"oceanography/attenuation/atmosphere/","page":"Atmosphere","title":"Atmosphere","text":"atmosphere_attenuation","category":"page"},{"location":"oceanography/attenuation/atmosphere/#OceanSonar.atmosphere_attenuation","page":"Atmosphere","title":"OceanSonar.atmosphere_attenuation","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"oceanography/attenuation/atmosphere/","page":"Atmosphere","title":"Atmosphere","text":"AtmosphereAttenuation","category":"page"},{"location":"oceanography/attenuation/atmosphere/#OceanSonar.AtmosphereAttenuation","page":"Atmosphere","title":"OceanSonar.AtmosphereAttenuation","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"oceanography/attenuation/ocean/#Ocean-Attenuation","page":"Ocean","title":"Ocean Attenuation","text":"","category":"section"},{"location":"oceanography/attenuation/ocean/","page":"Ocean","title":"Ocean","text":"ocean_attenuation","category":"page"},{"location":"oceanography/attenuation/ocean/#OceanSonar.ocean_attenuation","page":"Ocean","title":"OceanSonar.ocean_attenuation","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"oceanography/attenuation/ocean/","page":"Ocean","title":"Ocean","text":"OceanAttenuation","category":"page"},{"location":"oceanography/attenuation/ocean/#OceanSonar.OceanAttenuation","page":"Ocean","title":"OceanSonar.OceanAttenuation","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"oceanography/attenuation/ocean/#Jensen","page":"Ocean","title":"Jensen","text":"","category":"section"},{"location":"oceanography/attenuation/ocean/","page":"Ocean","title":"Ocean","text":"ocean_attenuation(::Val{:jensen}, ::Real, ::Real, ::Real)","category":"page"},{"location":"oceanography/attenuation/ocean/#OceanSonar.ocean_attenuation-Tuple{Val{:jensen}, Real, Real, Real}","page":"Ocean","title":"OceanSonar.ocean_attenuation","text":"dB/m\n\nEquation 1.47 of Jensen, et al (2011).\n\n\n\n\n\n","category":"method"},{"location":"oceanography/boundary/bathymetry/#Bathymetry","page":"Bathymetry","title":"Bathymetry","text":"","category":"section"},{"location":"oceanography/boundary/bathymetry/","page":"Bathymetry","title":"Bathymetry","text":"bathymetry","category":"page"},{"location":"oceanography/boundary/bathymetry/#OceanSonar.bathymetry","page":"Bathymetry","title":"OceanSonar.bathymetry","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"oceanography/boundary/bathymetry/","page":"Bathymetry","title":"Bathymetry","text":"Bathymetry","category":"page"},{"location":"oceanography/boundary/bathymetry/#OceanSonar.Bathymetry","page":"Bathymetry","title":"OceanSonar.Bathymetry","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"acoustics/propagation/tracing/ray/#Ray-Tracing","page":"Rays","title":"Ray Tracing","text":"","category":"section"},{"location":"acoustics/propagation/tracing/ray/","page":"Rays","title":"Rays","text":"using OceanSonar\nusing Plots\n\nfor model in list_models(Scenario)\n    scen = Scenario(model)\n    prop = @time \"$model\" Propagation(:trace, scen,\n        angles = critical_angles(scen, 21)\n    )\n    fig = visual(Beam, prop)\n    savefig(fig, \"rays_\" * modelsnake(scen.model) * \".svg\")\nend","category":"page"},{"location":"acoustics/propagation/tracing/ray/","page":"Rays","title":"Rays","text":"(Image: rays_parabolic_bathymetry.svg)","category":"page"},{"location":"acoustics/propagation/tracing/ray/","page":"Rays","title":"Rays","text":"(Image: rays_index_squared_profile.svg)","category":"page"},{"location":"acoustics/propagation/tracing/ray/","page":"Rays","title":"Rays","text":"(Image: rays_munk_profile.svg)","category":"page"},{"location":"acoustics/propagation/tracing/ray/","page":"Rays","title":"Rays","text":"(Image: rays_lloyd_mirror.svg)","category":"page"},{"location":"generic/visualisation/#Visualisation","page":"Visualisation","title":"Visualisation","text":"","category":"section"},{"location":"generic/visualisation/","page":"Visualisation","title":"Visualisation","text":"visual!\nvisual","category":"page"},{"location":"generic/visualisation/#OceanSonar.visual!","page":"Visualisation","title":"OceanSonar.visual!","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"generic/visualisation/#OceanSonar.visual","page":"Visualisation","title":"OceanSonar.visual","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"oceanography/environment/#Environment","page":"Environment","title":"Environment","text":"","category":"section"},{"location":"oceanography/environment/","page":"Environment","title":"Environment","text":"Environment","category":"page"},{"location":"oceanography/environment/#OceanSonar.Environment","page":"Environment","title":"OceanSonar.Environment","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"oceanography/celerity/seabed/#Seabed-Celerity","page":"Seabed","title":"Seabed Celerity","text":"","category":"section"},{"location":"oceanography/celerity/seabed/","page":"Seabed","title":"Seabed","text":"seabed_celerity","category":"page"},{"location":"oceanography/celerity/seabed/#OceanSonar.seabed_celerity","page":"Seabed","title":"OceanSonar.seabed_celerity","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"oceanography/celerity/seabed/","page":"Seabed","title":"Seabed","text":"SeabedCelerity","category":"page"},{"location":"oceanography/celerity/seabed/#OceanSonar.SeabedCelerity","page":"Seabed","title":"OceanSonar.SeabedCelerity","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"oceanography/attenuation/shear/#Shear-Seabed-Attenuation","page":"Seabed Shear","title":"Shear Seabed Attenuation","text":"","category":"section"},{"location":"oceanography/attenuation/shear/","page":"Seabed Shear","title":"Seabed Shear","text":"shear_seabed_attenuation","category":"page"},{"location":"oceanography/attenuation/shear/#OceanSonar.shear_seabed_attenuation","page":"Seabed Shear","title":"OceanSonar.shear_seabed_attenuation","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"oceanography/attenuation/shear/","page":"Seabed Shear","title":"Seabed Shear","text":"ShearSeabedAttenuation","category":"page"},{"location":"oceanography/attenuation/shear/#OceanSonar.ShearSeabedAttenuation","page":"Seabed Shear","title":"OceanSonar.ShearSeabedAttenuation","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"oceanography/celerity/intro/#Celerity","page":"Introduction","title":"Celerity","text":"","category":"section"},{"location":"acoustics/reflection/surface/#Surface-Reflection","page":"Surface","title":"Surface Reflection","text":"","category":"section"},{"location":"oceanography/density/atmosphere/#Atmosphere-Density","page":"Atmosphere","title":"Atmosphere Density","text":"","category":"section"},{"location":"oceanography/density/atmosphere/","page":"Atmosphere","title":"Atmosphere","text":"atmosphere_density","category":"page"},{"location":"oceanography/density/atmosphere/#OceanSonar.atmosphere_density","page":"Atmosphere","title":"OceanSonar.atmosphere_density","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"oceanography/density/atmosphere/","page":"Atmosphere","title":"Atmosphere","text":"AtmosphereDensity","category":"page"},{"location":"oceanography/density/atmosphere/#OceanSonar.AtmosphereDensity","page":"Atmosphere","title":"OceanSonar.AtmosphereDensity","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#Public-API","page":"Public API","title":"Public API","text":"","category":"section"},{"location":"generic/public/","page":"Public API","title":"Public API","text":"Modules = [OceanSonar]","category":"page"},{"location":"generic/public/#OceanSonar.Altimetry-generic-public","page":"Public API","title":"OceanSonar.Altimetry","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.Atmosphere-generic-public","page":"Public API","title":"OceanSonar.Atmosphere","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.AtmosphereAttenuation-generic-public","page":"Public API","title":"OceanSonar.AtmosphereAttenuation","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.AtmosphereCelerity-generic-public","page":"Public API","title":"OceanSonar.AtmosphereCelerity","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.AtmosphereDensity-generic-public","page":"Public API","title":"OceanSonar.AtmosphereDensity","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.Bathymetry-generic-public","page":"Public API","title":"OceanSonar.Bathymetry","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.Beam-generic-public","page":"Public API","title":"OceanSonar.Beam","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.Bivariate-generic-public","page":"Public API","title":"OceanSonar.Bivariate","text":"Bivariate <: Functor\n\nBivariate is both an abstract type and a function that produces an interpolation-extrapolation object.\n\nitp::Bivariate = Univariate(args...; kwargs...)\n\nReturns a bivariate interpolator-extrapolator object whose behaviour is specified by TODO.\n\nTODO: Implement.\n\nFor example,\n\nitp = Bivariate(1:10, 1:20, rand(10, 20))\nitp(2.4, 11.5)\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.Config-generic-public","page":"Public API","title":"OceanSonar.Config","text":"OceanSonar.Config\n\nSupertype for OceanSonar.jl configuration structures.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.Container-generic-public","page":"Public API","title":"OceanSonar.Container","text":"OceanSonar.Container\n\nSupertype for OceanSonar.jl containers for data.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.Environment-generic-public","page":"Public API","title":"OceanSonar.Environment","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.Functor-generic-public","page":"Public API","title":"OceanSonar.Functor","text":"OceanSonar.Functor\n\nSupertype for OceanSonar.jl functors.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.Medium-generic-public","page":"Public API","title":"OceanSonar.Medium","text":"Generic medium container.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.Ocean-generic-public","page":"Public API","title":"OceanSonar.Ocean","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.OceanAttenuation-generic-public","page":"Public API","title":"OceanSonar.OceanAttenuation","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.OceanCelerity-generic-public","page":"Public API","title":"OceanSonar.OceanCelerity","text":"OceanCelerity(model::Val)\n\nConstruction of a data container for storing the desired model.\n\nBuilt-in models are: TODO\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.OceanDensity-generic-public","page":"Public API","title":"OceanSonar.OceanDensity","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.OcnSon-generic-public","page":"Public API","title":"OceanSonar.OcnSon","text":"OceanSonar.OcnSon\n\nSupertype for OceanSonar.jl containers and functors.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.Propagation-generic-public","page":"Public API","title":"OceanSonar.Propagation","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.PropagationConfig-generic-public","page":"Public API","title":"OceanSonar.PropagationConfig","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.Result-generic-public","page":"Public API","title":"OceanSonar.Result","text":"OceanSonar.Result\n\nSupertype for OceanSonar.jl containers for results and data.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.Scenario-generic-public","page":"Public API","title":"OceanSonar.Scenario","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.Seabed-generic-public","page":"Public API","title":"OceanSonar.Seabed","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.SeabedAttenuation-generic-public","page":"Public API","title":"OceanSonar.SeabedAttenuation","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.SeabedCelerity-generic-public","page":"Public API","title":"OceanSonar.SeabedCelerity","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.SeabedDensity-generic-public","page":"Public API","title":"OceanSonar.SeabedDensity","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.ShearSeabedAttenuation-generic-public","page":"Public API","title":"OceanSonar.ShearSeabedAttenuation","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.ShearSeabedCelerity-generic-public","page":"Public API","title":"OceanSonar.ShearSeabedCelerity","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.TraceConfig-generic-public","page":"Public API","title":"OceanSonar.TraceConfig","text":"TODO.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.Trivariate-generic-public","page":"Public API","title":"OceanSonar.Trivariate","text":"Trivariate is both an abstract type and a function that produces an interpolation-extrapolation object.\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.Univariate-generic-public","page":"Public API","title":"OceanSonar.Univariate","text":"Univariate is both an abstract type and a function that produces an interpolation-extrapolation object.\n\nitp::Univariate = Univariate(args...; kwargs...)\n\nReturns univariate interpolator-extrapolator object whose behaviour is specified by TODO.\n\nTODO: Implement.\n\nFor example,\n\nitp = Univariate(1:10, rand(10))\nitp(2.4)\n\n\n\n\n\n","category":"type"},{"location":"generic/public/#OceanSonar.altimetry-generic-public","page":"Public API","title":"OceanSonar.altimetry","text":"z::Float64 = altimetry(model::Val, x::Real)\n\nx (m) horizontal range\nmodel name of model\nz (m) ocean surface height\n\nBuilt-in models are:\n\nExamples:\n\naltimetry(:sine, 1e3)\naltimetry(:sine, 1e2)\n\n\n\n\n\n","category":"function"},{"location":"generic/public/#OceanSonar.atmosphere_attenuation-generic-public","page":"Public API","title":"OceanSonar.atmosphere_attenuation","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"generic/public/#OceanSonar.atmosphere_celerity-generic-public","page":"Public API","title":"OceanSonar.atmosphere_celerity","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"generic/public/#OceanSonar.atmosphere_density-generic-public","page":"Public API","title":"OceanSonar.atmosphere_density","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"generic/public/#OceanSonar.bathymetry-generic-public","page":"Public API","title":"OceanSonar.bathymetry","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"generic/public/#OceanSonar.list_models-Tuple{Union{Function, Type{<:OceanSonar.OcnSon}}}-generic-public","page":"Public API","title":"OceanSonar.list_models","text":"models::Symbol = list_models(\n    func::Union{\n        Function,\n        Type{<:Container},\n        Type{<:Result}\n    }\n)\n\n\n\n\n\n","category":"method"},{"location":"generic/public/#OceanSonar.modelsnake-generic-public","page":"Public API","title":"OceanSonar.modelsnake","text":"modelsnake(model::Union{String, Symbol, Val})\n\nConverts model as a String, Symbol, or Val into a snake-case String for OceanSonar model parsing.\n\n\n\n\n\n","category":"function"},{"location":"generic/public/#OceanSonar.modelsymbol-Tuple{Union{String, Symbol, Val}}-generic-public","page":"Public API","title":"OceanSonar.modelsymbol","text":"modelsymbol(model::Union{String, Symbol, Val})\n\nConverts model as a String, Symbol, or Val into a Symbol for OceanSonar model parsing.\n\n\n\n\n\n","category":"method"},{"location":"generic/public/#OceanSonar.modeltitle-Tuple{Union{String, Symbol, Val}}-generic-public","page":"Public API","title":"OceanSonar.modeltitle","text":"modeltitle(model::Union{String, Symbol, Val})\n\nConverts model as a String, Symbol, or Val into a title-case String for OceanSonar model parsing.\n\n\n\n\n\n","category":"method"},{"location":"generic/public/#OceanSonar.modelval-Tuple{Union{String, Symbol, Val}}-generic-public","page":"Public API","title":"OceanSonar.modelval","text":"modelval(model::Union{String, Symbol, Val})\n\nConverts model as a String, Symbol, or Val into a Val for OceanSonar model parsing.\n\n\n\n\n\n","category":"method"},{"location":"generic/public/#OceanSonar.ocean_attenuation-Tuple{Val{:jensen}, Real, Real, Real}-generic-public","page":"Public API","title":"OceanSonar.ocean_attenuation","text":"dB/m\n\nEquation 1.47 of Jensen, et al (2011).\n\n\n\n\n\n","category":"method"},{"location":"generic/public/#OceanSonar.ocean_attenuation-generic-public","page":"Public API","title":"OceanSonar.ocean_attenuation","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"generic/public/#OceanSonar.ocean_celerity-Tuple{Val{:homogeneous}, Real, Real}-generic-public","page":"Public API","title":"OceanSonar.ocean_celerity","text":"c::Float64 = ocean_celerity(::Val{:homogeneous}, x::Real, z::Real)\n\nReturns a constant sound speed value c == 1500.0 for all ranges and depths.\n\n\n\n\n\n","category":"method"},{"location":"generic/public/#OceanSonar.ocean_celerity-Tuple{Val{:index_squared}, Real, Real}-generic-public","page":"Public API","title":"OceanSonar.ocean_celerity","text":"c::Float64 = ocean_celerity(:index_squared, x::Real, z::Real; c₀ = 1550.0)\n\nCalculation of ocean sound speed by Equation 3.77 of Jensen, et al (2011). This model is range independent and depth dependent.\n\nc₀ Sound speed at z = 0.\n\n\n\n\n\n","category":"method"},{"location":"generic/public/#OceanSonar.ocean_celerity-Tuple{Val{:munk}, Real, Real}-generic-public","page":"Public API","title":"OceanSonar.ocean_celerity","text":"c::Float64 = ocean_celerity(:munk, x::Real, z::Real; ϵ = 7.37e-3)\n\nCalculation of ocean sound speed by Equation 5.83 of Jensen, et al (2011). This model is range independent and depth dependent.\n\nϵ A factor (unitless) for variation with depth,\n\ne.g. ϵ = 0 gives a homogenous sound speed of 1500 m/s.\n\n\n\n\n\n","category":"method"},{"location":"generic/public/#OceanSonar.ocean_celerity-generic-public","page":"Public API","title":"OceanSonar.ocean_celerity","text":"c::Float64 = ocean_celerity(model, x::Real, z::Real; kwargs...)\n\nCalculation of sound speed in the ocean.\n\nmodel name of celerity model\nx horizontal range (m)\nz depth (m), positive downwards\nc celerity (m/s) of sound in the ocean for the specified model\nkwargs... keyword arguments, see specific model documentations.\n\nExample:\n\nc = ocean_celerity(:munk, 1e3, 1e2; ϵ = 1e-3)\n\n\n\n\n\n","category":"function"},{"location":"generic/public/#OceanSonar.ocean_density-Tuple{Val{:homogeneous}, Real, Real}-generic-public","page":"Public API","title":"OceanSonar.ocean_density","text":"ρ::Real = ocean_density(:homogeneous, x::Real, z::Real)\n\nSection 2.1.1.2 of Ainslie (2010).\n\n\n\n\n\n","category":"method"},{"location":"generic/public/#OceanSonar.ocean_density-generic-public","page":"Public API","title":"OceanSonar.ocean_density","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"generic/public/#OceanSonar.seabed_attenuation-generic-public","page":"Public API","title":"OceanSonar.seabed_attenuation","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"generic/public/#OceanSonar.seabed_celerity-generic-public","page":"Public API","title":"OceanSonar.seabed_celerity","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"generic/public/#OceanSonar.seabed_density-generic-public","page":"Public API","title":"OceanSonar.seabed_density","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"generic/public/#OceanSonar.shear_seabed_attenuation-generic-public","page":"Public API","title":"OceanSonar.shear_seabed_attenuation","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"generic/public/#OceanSonar.shear_seabed_celerity-generic-public","page":"Public API","title":"OceanSonar.shear_seabed_celerity","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"generic/public/#OceanSonar.visual!-generic-public","page":"Public API","title":"OceanSonar.visual!","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"generic/public/#OceanSonar.visual-generic-public","page":"Public API","title":"OceanSonar.visual","text":"TODO.\n\n\n\n\n\n","category":"function"},{"location":"oceanography/intro/#Sonar-Oceanography","page":"Introduction","title":"Sonar Oceanography","text":"","category":"section"},{"location":"acoustics/propagation/tracing/grid/#Beam-Grid-Interpolation","page":"Grid","title":"Beam-Grid Interpolation","text":"","category":"section"},{"location":"acoustics/propagation/tracing/grid/","page":"Grid","title":"Grid","text":"using OceanSonar\nusing Plots\nusing .Threads\n\n@time \"all\" begin\n    begin\n        models = list_models(Scenario)\n        for m in eachindex(models)\n            model = models[m]\n            scen = Scenario(model)\n            prop = @time \"$model\" Propagation(:trace, scen,\n                angles = critical_angles(scen)\n            )\n            fig = visual(prop)\n            savefig(fig, \"prop_\" * modelsnake(scen.model) * \".svg\")\n        end\n    end\nend","category":"page"},{"location":"acoustics/propagation/tracing/grid/","page":"Grid","title":"Grid","text":"(Image: prop_parabolic_bathymetry.svg)","category":"page"},{"location":"acoustics/propagation/tracing/grid/","page":"Grid","title":"Grid","text":"(Image: prop_index_squared_profile.svg)","category":"page"},{"location":"acoustics/propagation/tracing/grid/","page":"Grid","title":"Grid","text":"(Image: prop_munk_profile.svg)","category":"page"},{"location":"acoustics/propagation/tracing/grid/","page":"Grid","title":"Grid","text":"(Image: prop_lloyd_mirror.svg)","category":"page"}]
}
